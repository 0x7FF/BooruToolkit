Thank you for taking interest in implementing your own methods!
If you can, please submit them to this project's GitHub or forum thread so that other people can use them as well!

Execution flow of TagOrganizer:
1. Load custom settings, set variables and initialize folders
2. Check for required software (curl, xmllint, diff, recode, md5sum, sed) and exit if any of them are missing
3. Backup processed.txt to processed.txt.backup
4. Save sorted list of files in user's library to ./data/all_s.txt
5. Diff already processed files (if any) and sorted file list
6. Untagged files are saved to ./data/pending.txt
7. Every file path is fed to function proc with path as an argument
8. Check if file name is an MD5 (unexpected behavior if MD5 is not in the beginning of file name - to be fixed!) and calculate it if it isn't
9. Check if tags were already downloaded, and if they weren't, download them using curl and extract tags to ./data/post/$md5-tags.txt
10. Check if tag file is empty. If it isn't, execute user's chosen module and save filename to processed.txt
11. Upon module execution, it has access to library path($librarydir), destination path($sorteddir), name($fn), MD5($md5) and tag($tag)
  What I usually do is a while read tag loop to execute a command for every tag from our source file (./data/post/$md5-tags.txt)

Variables:
User-defined library path: $librarydir
User-defined destination path: $sorteddir
File name: $fn
File MD5: $md5
Tag to be processed: $tag

If user is using recursive mode, $fn is the full path to the file!
